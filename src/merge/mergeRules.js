/**
 * Rules for merging 2 values.
 * @type {{array: Function, string: Function, object: Function}}
 */
BookrCrawler.Merger.mergeRules = {
    /**
     * Rule for merging 2 arrays
     * Merge result is generated by concantenating both arrays and removing duplicate entries.
     *
     * @param {Array} a destination
     * @param {Array} b source
     * @returns {Array} merged array
     */
    'array': function (a, b) {
        'use strict';

        var concat = a.concat(b);

        // via http://stackoverflow.com/a/9229821
        return concat.filter(function (elem, pos) {
            return concat.indexOf(elem) === pos;
        });
    },
    /**
     * Rule for merging 2 strings
     * Merge result is generated by comparing for undefined and length.
     * If overwriteAIfB is true, it overwrites a if be has a length greater 0.
     *
     * @param {String} a destination
     * @param {String} b source
     * @param {Boolean} overwriteAIfB overwrite a if b is not empt
     * @returns {String} merged string
     */
    'string': function (a, b, overwriteAIfB) {
        'use strict';
        var merged = '';
        if ((a === undefined || b === undefined) && a !== b) {
            merged = a || b;
        } else {
            merged = a.length > b.length && !(overwriteAIfB && b.length > 0) ? a : b;
        }

        return merged;
    },
    /**
     * Rule for merging 2 objects
     * Merge result is generated iterating over each property and merging it via other rules from {@link BookrCrawler.Merger.m
     * }
     *
     * @see {@link BookrCrawler.Merger.mergeRules.array}
     * @see {@link BookrCrawler.Merger.mergeRules.string}
     * @see {@link BookrCrawler.Merger.mergeRules.object}
     * @param {Object} a destination
     * @param {Object} b source
     * @param {Boolean} overwriteAIfB
     * @returns {Object} merged object
     */
    'object': function (a, b, overwriteAIfB) {
        'use strict';
        var src,
            dest,
            key,
            type;

        if (Object.keys(a).length > Object.keys(b).length) {
            // a has more properties
            dest = b;
            src = a;
        } else {
            // b has more or equal properties
            dest = a;
            src = b;
        }

        for (key in src) {
            if (src.hasOwnProperty(key)) {

                if (dest.hasOwnProperty(key)) {
                    type = BookrCrawler.Util.Type.getType(src[key]);

                    dest[key] = BookrCrawler.Merger.mergeRules[type](dest[key], src[key], overwriteAIfB);
                } else {
                    dest[key] = src[key];
                }
            }
        }

        return dest;
    }
};